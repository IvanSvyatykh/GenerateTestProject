import os
from openpyxl import Workbook
from docx import Document
from fpdf import FPDF
from datetime import datetime
import json


async def generate_docx(test_json, theme, user_id, format_response):
    if isinstance(test_json, str):
        try:
            test_json = json.loads(test_json)
        except json.JSONDecodeError:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")

    if not isinstance(test_json, dict) or "questions" not in test_json:
        raise ValueError("test_json –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á 'questions'")

    questions = test_json["questions"]
    document = Document()
    document.add_heading(f"–¢–µ–º–∞ —Ç–µ—Å—Ç–∞: {theme}", level=1)

    for idx, question in enumerate(questions, 1):
        q_text = f"{idx}. {question['question']}"
        document.add_paragraph(q_text)

        if (
            format_response == "‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤"
            or format_response == "üî† –° –ø—Ä–æ–ø—É—Å–∫–∞–º–∏"
        ):
            for index, answer in enumerate(question.get("answers", []), 1):
                document.add_paragraph(f"   {index}. {answer}")
        elif format_response == "üîÄ –°–º–µ—à–∞–Ω–Ω—ã–π":
            if question.get("type") == "choice":
                for index, answer in enumerate(question.get("answers", []), 1):
                    document.add_paragraph(f"   {index}. {answer}")
            document.add_paragraph("")
        elif format_response == "üìú –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
            document.add_paragraph("")

    document.add_page_break()
    document.add_heading("–û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç:", level=1)

    for idx, question in enumerate(questions, 1):
        document.add_paragraph(f"{idx}. {question['correct_answer']}")

    file_path = f"tests/{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
    os.makedirs("tests", exist_ok=True)
    document.save(file_path)

    return file_path


async def generate_pdf(test_json, theme, user_id, format_response):
    if isinstance(test_json, str):
        try:
            test_json = json.loads(test_json)
        except json.JSONDecodeError:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")

    if not isinstance(test_json, dict) or "questions" not in test_json:
        raise ValueError("test_json –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á 'questions'")

    questions = test_json["questions"]
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font("ArialUnicode", "", "ttf/Arial-Unicode-Regular.ttf", uni=True)
    pdf.set_font("ArialUnicode", size=12)

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —à–∏—Ä–∏–Ω—É –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 180)
    text_width = 180

    # –î–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    pdf.multi_cell(text_width, 10, txt=f"–¢–µ–º–∞ —Ç–µ—Å—Ç–∞: {theme}", align="C")
    pdf.ln()  # –î–æ–±–∞–≤–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞

    for idx, question in enumerate(questions, 1):
        # –í–æ–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º
        pdf.multi_cell(text_width, 10, txt=f"{idx}. {question['question']}", align="J")
        pdf.ln(5)  # –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞

        if (
            format_response == "‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤"
            or format_response == "üî† –° –ø—Ä–æ–ø—É—Å–∫–∞–º–∏"
        ):
            for index, answer in enumerate(question.get("answers", []), 1):
                pdf.set_x(20)
                pdf.multi_cell(text_width - 20, 10, txt=f"{index}. {answer}")
        elif format_response == "üîÄ –°–º–µ—à–∞–Ω–Ω—ã–π":
            if question.get("type") == "choice":
                for index, answer in enumerate(question.get("answers", []), 1):
                    pdf.set_x(20)
                    pdf.multi_cell(text_width - 20, 10, txt=f"{index}. {answer}")
            pdf.ln(5)
        elif format_response == "üìú –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
            pdf.ln(5)

    pdf.add_page()
    pdf.multi_cell(text_width, 10, txt="–û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç:", align="C")
    pdf.ln()

    for idx, question in enumerate(questions, 1):
        pdf.set_x(20)  # –û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–ª–∏–ø–∞–ª–æ –∫ –∫—Ä–∞—é
        pdf.multi_cell(text_width - 20, 10, txt=f"{idx}. {question['correct_answer']}")

    file_path = f"tests/{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    os.makedirs("tests", exist_ok=True)
    pdf.output(file_path)
    return file_path


async def generate_excel(test_json, theme, user_id, format_response):
    if isinstance(test_json, str):
        try:
            test_json = json.loads(test_json)
        except json.JSONDecodeError:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")

    if not isinstance(test_json, dict) or "questions" not in test_json:
        raise ValueError("test_json –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á 'questions'")

    questions = test_json["questions"]
    workbook = Workbook()
    sheet = workbook.active
    sheet.title = "–¢–µ—Å—Ç"
    sheet["A1"] = f"–¢–µ–º–∞ —Ç–µ—Å—Ç–∞: {theme}"
    row = 2

    for idx, question in enumerate(questions, 1):
        sheet.cell(row=row, column=1, value=f"{idx}. {question['question']}")
        row += 1

        if (
            format_response == "‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤"
            or format_response == "üî† –° –ø—Ä–æ–ø—É—Å–∫–∞–º–∏"
        ):
            for index, answer in enumerate(question.get("answers", []), 1):
                sheet.cell(row=row, column=1, value=f"   {index}. {answer}")
                row += 1
        elif format_response == "üîÄ –°–º–µ—à–∞–Ω–Ω—ã–π":
            if question.get("type") == "choice":
                for index, answer in enumerate(question.get("answers", []), 1):
                    sheet.cell(row=row, column=1, value=f"   {index}. {answer}")
                    row += 1
            row += 1
        elif format_response == "üìú –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
            row += 1

    row += 1
    sheet.cell(row=row, column=1, value="–û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç:")
    row += 1
    for idx, question in enumerate(questions, 1):
        sheet.cell(row=row, column=1, value=f"{idx}. {question['correct_answer']}")
        row += 1

    file_path = f"tests/{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    os.makedirs("tests", exist_ok=True)
    workbook.save(file_path)
    return file_path
